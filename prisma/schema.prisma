// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          Int                   @id @default(autoincrement())
  fullname                    String
  email                       String?               @unique
  phonenumber                 String                @unique @db.VarChar(11)
  password                    String
  lastTimeSeen                DateTime              @default(now())
  birthday                    DateTime?
  isBlock                     Boolean               @default(false)
  createdTeamCount            String                @default("0") @db.VarChar(1)
  teamCount                   Int                   @default(1)
  isPayedForCreatingThirdTeam Boolean               @default(false)
  gender                      Gender?
  city                        String?
  state                       String?
  country                     String?
  // TODO : remove this
  bio                         String?
  // user level
  role                        UserRole              @default(Normal)
  teams                       Team[]
  // admin
  sellableTeam                AdminSellableTeam[]   @relation(name: "seller")
  sellablePlayer              AdminSellablePlayer[]
  // 
  purchasedTeams              AdminSellableTeam[]   @relation(name: "buyer")
}

enum UserRole {
  Normal
  Supporter
  Admin
}

enum Gender {
  Male
  Female
}

model Team {
  id                                 Int                                 @id @default(autoincrement())
  // owner
  owner                              User?                               @relation(fields: [ownerId], references: [id])
  ownerId                            Int?
  // 
  name                               String                              @unique
  bio                                String?
  coinCount                          Int                                 @default(0)
  logoUrl                            String?
  profilePictureUrl                  String?
  fanSatisfaction                    Int                                 @default(50)
  isOnline                           Boolean                             @default(false)
  lastTimeSeen                       DateTime                            @default(now())
  dateOfStablishment                 DateTime                            @default(now())
  spirit                             Int                                 @default(100)
  isBlock                            Boolean                             @default(false)
  technique                          Technique
  strategy                           Strategy
  AdminTeamSalesContract             AdminSellableTeam?
  // 
  composition                        Composition                         @relation(fields: [compositionId], references: [id])
  compositionId                      Int
  players                            Player[]
  playerCount                        Int                                 @default(21)
  teamMembershipType                 TeamMembershipTypeName              @default(Normal)
  endOfTeamMemberShipType            DateTime                            @default(now())
  dateOfEstablishment                DateTime                            @default(now())
  // team competitions
  // league
  leauge                             League?                             @relation(fields: [leagueId], references: [id])
  leagueId                           Int?
  leagueThatRankedFirst              League?                             @relation(name: "firstTeam")
  leagueThatRankedSecond             League?                             @relation(name: "secondTeam")
  leagueThatRankedThird              League?                             @relation(name: "thirdTeam")
  leagueGamesHostTeam                LeagueGame[]                        @relation("hostTeam")
  leagueGamesVisitingTeam            LeagueGame[]                        @relation("visitingTeam")
  // golden cup
  goldenCup                          GoldenCup?                          @relation(fields: [goldenCupId], references: [id])
  goldenCupId                        Int?
  goldenCupThatRankedFirst           GoldenCup?                          @relation(name: "firstTeam")
  goldenCupThatRankedSecond          GoldenCup?                          @relation(name: "secondTeam")
  goldenCupGamesHostTeam             GoldenCupGame[]                     @relation("hostTeam")
  goldenCupGamesVisitingTeam         GoldenCupGame[]                     @relation("visitingTeam")
  // champions cup
  championsCup                       ChampionsCup?                       @relation(fields: [championsCupId], references: [id])
  championsCupId                     Int?
  championsCupThatRankedFirst        ChampionsCup?                       @relation(name: "firstTeam")
  championsCupThatRankedSecond       ChampionsCup?                       @relation(name: "secondTeam")
  championsCupGamesHostTeam          ChampionsCupGame[]                  @relation("hostTeam")
  championsCupGamesVisitingTeam      ChampionsCupGame[]                  @relation("visitingTeam")
  // friendly game
  friendlyGamesHostTeam              FriendlyGame[]                      @relation("hostTeam")
  friendlyGamesVisitingTeam          FriendlyGame[]                      @relation("visitingTeam")
  friendlyGameRequestIsOn            Boolean                             @default(true)
  // requestFriendlyGameCount           Int                                 @default(0)
  // change
  friendlyGameCount                  Int                                 @default(0)
  friendlyGameTimeOneIsEmpty         Boolean                             @default(true)
  friendlyGameTimeTwoIsEmpty         Boolean                             @default(true)
  friendlyGameTimeThreeIsEmpty       Boolean                             @default(true)
  // end of team competitions
  teamScores                         TeamScores?
  tournament                         Tournament?                         @relation(fields: [tournamentId], references: [id])
  tournamentId                       Int?
  TournamentsThatWonFirstPlace       Tournament[]                        @relation(name: "firstTeam")
  TournamentsThatWonSecondPlace      Tournament[]                        @relation(name: "secondTeam")
  TournamentsThatWonThirdPlace       Tournament[]                        @relation(name: "thirdTeam")
  RequestToCreatePlayer              RequestToCreatePlayer[]
  sponser                            Sponser?                            @relation(fields: [sponserId], references: [id])
  sponserId                          Int?
  teamAssets                         TeamAssets?
  // teamComminiucations 
  privateChatIsOn                    Boolean                             @default(true)
  privateChatsTeamOne                PrivateChat[]                       @relation(name: "teamOne")
  privateChatsTeamTwo                PrivateChat[]                       @relation(name: "teamTwo")
  tickets                            Ticket[]
  publicAdminMessages                PublicAdminMessagesOfTeams[]
  groups                             GroupMember[]
  groupPostComments                  GroupPostComment[]
  groupPostLikes                     GroupPost[]                         @relation(name: "like")
  groupPostDisLikes                  GroupPost[]                         @relation(name: "disLike")
  chatRooms                          ChatRoomMember[]
  // end of teamComminiucations
  coinPurchaseInvoice                CoinPurchaseInvoice[]
  TeamMembershipTypePurchaseInvoices TeamMembershipTypePurchaseInvoice[]
  // follower fallowing
  followingIsOn                      Boolean                             @default(true)
  fallowers                          FollowerFallowing[]                 @relation(name: "followers")
  fallowing                          FollowerFallowing[]                 @relation(name: "fallowing")
  // market
  purchasedAdminPlayersCount         Int                                 @default(0)
  purchasedAdminPlayer               AdminSellablePlayer[]
  purchasedPlayesrCount              Int                                 @default(0)
  purchasedPlayer                    playerTransfers[]                   @relation(name: "buyer")
  soldPlayersCount                   Int                                 @default(0)
  PlayersOnSale                      playerTransfers[]                   @relation(name: "seller")
}

enum TeamStatusInCup {
  First
  Second
  Remove
}

model FollowerFallowing {
  id          Int      @id @default(autoincrement())
  date        DateTime
  follower    Team     @relation(name: "followers", fields: [followerId], references: [id])
  followerId  Int
  fallowing   Team     @relation(name: "fallowing", fields: [fallowingId], references: [id])
  fallowingId Int
}

model TeamAssets {
  id                  Int                @id @default(autoincrement())
  team                Team               @relation(fields: [teamId], references: [id])
  teamId              Int                @unique
  gym                 Gym?               @relation(fields: [gymId], references: [id])
  gymId               Int?
  usedGymCount        Int                @default(0)
  coach               Coach?             @relation(fields: [coachId], references: [id])
  coachId             Int?
  stadium             Stadium?           @relation(fields: [stadiumId], references: [id])
  stadiumId           Int?
  stadiumFacilities   StadiumFacilities? @relation(fields: [stadiumFacilitiesId], references: [id])
  stadiumFacilitiesId Int?
  stadiumName         String             @default("تعریف نشده")
  doctor              Doctor?            @relation(fields: [doctorId], references: [id])
  doctorId            Int?
  isUsedDoctor        Boolean            @default(false)
  psychologist        Psychologist?      @relation(fields: [psychologistId], references: [id])
  psychologistId      Int?
  isUsedPsychologist  Boolean            @default(false)
  isUsedRecovery      Boolean            @default(false)
}

model TeamScores {
  id                         Int     @id @default(autoincrement())
  team                       Team    @relation(fields: [teamId], references: [id])
  teamId                     Int     @unique
  // league
  scoreInLeague              Int     @default(0)
  winCountInLeague           Int     @default(0)
  loseCountInLeague          Int     @default(0)
  equalCountInLeague         Int     @default(0)
  firstTeamInLeagueCupCount  Int     @default(0)
  secondTeamInLeagueCupCount Int     @default(0)
  thirdTeamInLeagueCupCount  Int     @default(0)
  // total
  totalScore                 Int     @default(0)
  totalWinCount              Int     @default(0)
  totalLoseCount             Int     @default(0)
  totalEqualCount            Int     @default(0)
  hasBestTeamCup             Boolean @default(false)
  // cups
  championsCupCount          Int     @default(0)
  goldenCupCount             Int     @default(0)
  // tournament
  scoreInTournament          Int     @default(0)
}

enum Technique {
  Defend
  Moderate
  Attack
}

enum Strategy {
  Press
  ShortPass
  LongPass
  CounterAttack
  KeepBall
}

model TeamMembershipType {
  id              Int                                 @id @default(autoincrement())
  name            TeamMembershipTypeName              @unique
  priceInToman    Int
  purchaseInvoice TeamMembershipTypePurchaseInvoice[]
}

model TeamMembershipTypePurchaseInvoice {
  id                   Int                @id @default(autoincrement())
  date                 DateTime           @default(now())
  authority            String             @unique
  amountInToman        Int
  isPay                Boolean            @default(false)
  team                 Team               @relation(fields: [teamId], references: [id])
  teamId               Int
  TeamMembershipType   TeamMembershipType @relation(fields: [TeamMembershipTypeId], references: [id])
  TeamMembershipTypeId Int
}

enum TeamMembershipTypeName {
  Normal
  Silver
  Golden
  Diamond
}

model ReservedTeamName {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model Composition {
  id               Int     @id @default(autoincrement())
  name             String  @unique
  Goalkeaper_No    Boolean @default(false)
  Defender_Left    Boolean @default(false)
  Defender_One     Boolean @default(false)
  Defender_Two     Boolean @default(false)
  Defender_Three   Boolean @default(false)
  Defender_Right   Boolean @default(false)
  Midfielder_Left  Boolean @default(false)
  Midfielder_One   Boolean @default(false)
  Midfielder_Two   Boolean @default(false)
  Midfielder_Three Boolean @default(false)
  Midfielder_Right Boolean @default(false)
  Attacker_Left    Boolean @default(false)
  Attacker_One     Boolean @default(false)
  Attacker_Two     Boolean @default(false)
  Attacker_Three   Boolean @default(false)
  Attacker_Right   Boolean @default(false)
  teams            Team[]
}

model Gym {
  id       Int          @id @default(autoincrement())
  teams    TeamAssets[]
  level    String       @unique @db.VarChar(1)
  price    Int
  capacity Int
}

model Coach {
  id      Int          @id @default(autoincrement())
  teams   TeamAssets[]
  level   String       @unique @db.VarChar(1)
  price   Int
  ability Int
}

model Stadium {
  id       Int          @id @default(autoincrement())
  teams    TeamAssets[]
  level    String       @unique @db.VarChar(1)
  price    Int
  capacity Int
}

model StadiumFacilities {
  id         Int          @id @default(autoincrement())
  teams      TeamAssets[]
  level      String       @unique @db.VarChar(1)
  price      Int
  facilities String
  win        Int
  equal      Int
  lose       Int
}

model Doctor {
  id      Int          @id @default(autoincrement())
  teams   TeamAssets[]
  level   String       @unique @db.VarChar(1)
  price   Int
  ability Int
}

model Psychologist {
  id      Int          @id @default(autoincrement())
  teams   TeamAssets[]
  level   String       @unique @db.VarChar(1)
  price   Int
  ability Int
}

model Recovery {
  id      Int    @id @default(autoincrement())
  level   String @unique @db.VarChar(1)
  price   Int
  ability Int
}

model Player {
  id                                             Int                            @id @default(autoincrement())
  team                                           Team?                          @relation(fields: [teamId], references: [id])
  teamId                                         Int?
  name                                           String
  tShirtNumber                                   Int
  facePicture                                    PlayerFacePicture              @relation(fields: [facePictureId], references: [id])
  facePictureId                                  Int
  age                                            Int
  goalCountInLeague                              Int                            @default(0)
  position                                       PlayerPosition                 @relation(name: "playerPosition", fields: [positionId], references: [id])
  positionId                                     Int
  positionInMainComposition                      PlayerPosition?                @relation(name: "playerPositionInMainComposition", fields: [positionInMainCompositionId], references: [id])
  positionInMainCompositionId                    Int?
  inTeamMainComposition                          Boolean                        @default(false)
  nationality                                    String                         @default("ایران")
  energy                                         Int                            @default(100)
  injury                                         Int                            @default(0)
  isPracticed                                    Boolean                        @default(false)
  // power
  spead                                          Int
  controll                                       Int
  pass                                           Int
  flexibility                                    Int
  stamina                                        Int
  technique                                      Int
  shoot                                          Int
  drible                                         Int
  focus                                          Int
  experience                                     Int
  totalPower                                     Int
  // end power
  status                                         PlayerStatus                   @default(InTeam)
  salary                                         Int
  RequestToCreatePlayer                          RequestToCreatePlayer?
  // golden cup
  goldenCupGameBestPlayer                        GoldenCupGame[]                @relation(name: "bestPlayer")
  goldenCupGameInjuredPlayer                     GoldenCupGame[]                @relation(name: "injuredPlayer")
  goldenCupGameplayerOneHasReceivedYellowCart    GoldenCupGame[]                @relation(name: "playerOneHasReceivedYellowCart")
  goldenCupGamePlayerTwoHasReceivedYellowCart    GoldenCupGame[]                @relation(name: "playerTwoHasReceivedYellowCart")
  goldenCupGamePlayerHasReceivedRedCart          GoldenCupGame[]                @relation(name: "playerHasReceivedRedCart")
  goldenCupGameGoals                             goldenCupGameScorerPlayer[]
  // champions cup
  championsCupGameBestPlayer                     ChampionsCupGame[]             @relation(name: "bestPlayer")
  championsCupGameInjuredPlayer                  ChampionsCupGame[]             @relation(name: "injuredPlayer")
  championsCupGameplayerOneHasReceivedYellowCart ChampionsCupGame[]             @relation(name: "playerOneHasReceivedYellowCart")
  championsCupGamePlayerTwoHasReceivedYellowCart ChampionsCupGame[]             @relation(name: "playerTwoHasReceivedYellowCart")
  championsCupGamePlayerHasReceivedRedCart       ChampionsCupGame[]             @relation(name: "playerHasReceivedRedCart")
  championsCupGameGoals                          ChampionsCupGameScorerPlayer[]
  // league
  leagueGameBestPlayer                           LeagueGame[]                   @relation(name: "bestPlayer")
  leagueGameInjuredPlayer                        LeagueGame[]                   @relation(name: "injuredPlayer")
  leagueGameplayerOneHasReceivedYellowCart       LeagueGame[]                   @relation(name: "playerOneHasReceivedYellowCart")
  leagueGamePlayerTwoHasReceivedYellowCart       LeagueGame[]                   @relation(name: "playerTwoHasReceivedYellowCart")
  leagueGamePlayerHasReceivedRedCart             LeagueGame[]                   @relation(name: "playerHasReceivedRedCart")
  leagueGameGoals                                LeagueGameScorerPlayer[]
  // friendly game
  friendlyGameBestPlayer                         FriendlyGame[]                 @relation(name: "bestPlayer")
  friendlyGameInjuredPlayer                      FriendlyGame[]                 @relation(name: "injuredPlayer")
  friendlyGameplayerOneHasReceivedYellowCart     FriendlyGame[]                 @relation(name: "playerOneHasReceivedYellowCart")
  friendlyGamePlayerTwoHasReceivedYellowCart     FriendlyGame[]                 @relation(name: "playerTwoHasReceivedYellowCart")
  friendlyGamePlayerHasReceivedRedCart           FriendlyGame[]                 @relation(name: "playerHasReceivedRedCart")
  friendlyGameGoals                              FriendlyGameScorerPlayer[]
  // market
  adminPlayerSalesContract                       AdminSellablePlayer?
  playerSalesContract                            playerTransfers?
  // crts
  // yellow
  yellowCartInLeagueGameCount                    String                         @default("0") @db.VarChar(1)
  yellowCartInFriendlyGameCount                  String                         @default("0") @db.VarChar(1)
  yellowCartInGoldenCupGameCount                 String                         @default("0") @db.VarChar(1)
  yellowCartInChampionsCupGameCount              String                         @default("0") @db.VarChar(1)
  // red
  hasRedCartInLeagueGame                         Boolean                        @default(false)
  hasRedCartInFriendlyGame                       Boolean                        @default(false)
  hasRedCartInGoldenCupGame                      Boolean                        @default(false)
  hasRedCartInChampionsCupGame                   Boolean                        @default(false)
}

enum PlayerStatus {
  New
  InRequest
  InMarket
  InTeam
}

model ReservedPlayerName {
  id   Int    @id @default(autoincrement())
  name String
}

model PrimitivePlayerName {
  id   Int    @id @default(autoincrement())
  name String
}

model PlayerFacePicture {
  id         Int      @id @default(autoincrement())
  players    Player[]
  pictureUrl String
  isSpecial  Boolean  @default(false)
}

model PlayerPosition {
  id                              Int           @id @default(autoincrement())
  playerPosition                  Player[]      @relation("playerPosition")
  playerPositionInMainComposition Player[]      @relation("playerPositionInMainComposition")
  major                           MajorPosition
  manor                           ManorPostion
}

enum MajorPosition {
  Goalkeaper
  Defender
  Midfielder
  Attacker
}

enum ManorPostion {
  Left
  One
  Two
  Three
  Right
  Middle
  No
}

model CoinPlan {
  id                   Int                   @id @default(autoincrement())
  amount               Int
  discountInPercent    Int                   @default(0)
  price                Int
  coinPurchaseInvoices CoinPurchaseInvoice[]
}

model CoinPurchaseInvoice {
  id            Int      @id @default(autoincrement())
  date          DateTime @default(now())
  authority     String   @unique
  amountInToman Int
  isPay         Boolean  @default(false)
  team          Team     @relation(fields: [teamId], references: [id])
  teamId        Int
  coinPlan      CoinPlan @relation(fields: [coinPlanId], references: [id])
  coinPlanId    Int
}

model RequestToCreatePlayer {
  id            Int           @id @default(autoincrement())
  team          Team          @relation(fields: [teamId], references: [id])
  teamId        Int
  player        Player?       @relation(fields: [playerId], references: [id])
  playerId      Int?          @unique
  status        RequestStatus @default(Pending)
  adminResponse String?
}

// competition
//  golden cup
model GoldenCup {
  id                  Int             @id @default(autoincrement())
  teamCount           Int
  registeredTeamCount Int             @default(0)
  registerCostInToman Int
  status              GoldenCupStatus @default(NotStarted)
  silver              Boolean
  golden              Boolean
  diamond             Boolean
  teams               Team[]
  // top teams
  firstTeam           Team?           @relation(name: "firstTeam", fields: [firstTeamId], references: [id])
  firstTeamId         Int?            @unique
  secondTeam          Team?           @relation(name: "secondTeam", fields: [secondTeamId], references: [id])
  secondTeamId        Int?            @unique
  games               GoldenCupGame[]
}

enum GoldenCupStatus {
  NotStarted
  Registering
  EndOfRegisteration
  Running
  Ended
}

model GoldenCupGame {
  id                               Int                         @id @default(autoincrement())
  step                             Int
  goldenCup                        GoldenCup                   @relation(fields: [goldenCupId], references: [id])
  goldenCupId                      Int
  hostTeam                         Team                        @relation(name: "hostTeam", fields: [hostTeamId], references: [id])
  hostTeamId                       Int
  visitingTeam                     Team                        @relation(name: "visitingTeam", fields: [visitingTeamId], references: [id])
  visitingTeamId                   Int
  startTime                        DateTime
  resultDescription                String?
  result                           GameResult                  @default(undone)
  winerTeamGoalCount               Int?
  loserGoalCount                   Int?
  // special player in game
  bestPlayer                       Player?                     @relation(name: "bestPlayer", fields: [bestPlayerId], references: [id])
  bestPlayerId                     Int?
  injuredPlayer                    Player?                     @relation(name: "injuredPlayer", fields: [injuredPlayerId], references: [id])
  injuredPlayerId                  Int?
  playerOneHasReceivedYellowCart   Player?                     @relation(name: "playerOneHasReceivedYellowCart", fields: [playerOneHasReceivedYellowCartId], references: [id])
  playerOneHasReceivedYellowCartId Int?
  playerTwoHasReceivedYellowCart   Player?                     @relation(name: "playerTwoHasReceivedYellowCart", fields: [playerTwoHasReceivedYellowCartId], references: [id])
  playerTwoHasReceivedYellowCartId Int?
  playerHasReceivedRedCart         Player?                     @relation(name: "playerHasReceivedRedCart", fields: [playerHasReceivedRedCartId], references: [id])
  playerHasReceivedRedCartId       Int?
  scorerPlayer                     goldenCupGameScorerPlayer[]
}

model goldenCupGameScorerPlayer {
  id              Int           @id @default(autoincrement())
  goldenCupGame   GoldenCupGame @relation(fields: [goldenCupGameId], references: [id])
  goldenCupGameId Int
  player          Player        @relation(fields: [playerId], references: [id])
  playerId        Int
}

// end of golden cup
// champions cup
model ChampionsCup {
  id           Int                @id @default(autoincrement())
  // team count = 32
  teamCount    Int                @default(32)
  teams        Team[]
  // top teams
  firstTeam    Team?              @relation(name: "firstTeam", fields: [firstTeamId], references: [id])
  firstTeamId  Int?               @unique
  secondTeam   Team?              @relation(name: "secondTeam", fields: [secondTeamId], references: [id])
  secondTeamId Int?               @unique
  games        ChampionsCupGame[]
}

model ChampionsCupGame {
  id                               Int                            @id @default(autoincrement())
  step                             Int
  championsCup                     ChampionsCup                   @relation(fields: [championsCupId], references: [id])
  championsCupId                   Int
  hostTeam                         Team                           @relation(name: "hostTeam", fields: [hostTeamId], references: [id])
  hostTeamId                       Int
  visitingTeam                     Team                           @relation(name: "visitingTeam", fields: [visitingTeamId], references: [id])
  visitingTeamId                   Int
  startTime                        DateTime
  resultDescription                String?
  result                           GameResult                     @default(undone)
  winerTeamGoalCount               Int?
  loserGoalCount                   Int?
  // special player in game
  bestPlayer                       Player?                        @relation(name: "bestPlayer", fields: [bestPlayerId], references: [id])
  bestPlayerId                     Int?
  injuredPlayer                    Player?                        @relation(name: "injuredPlayer", fields: [injuredPlayerId], references: [id])
  injuredPlayerId                  Int?
  playerOneHasReceivedYellowCart   Player?                        @relation(name: "playerOneHasReceivedYellowCart", fields: [playerOneHasReceivedYellowCartId], references: [id])
  playerOneHasReceivedYellowCartId Int?
  playerTwoHasReceivedYellowCart   Player?                        @relation(name: "playerTwoHasReceivedYellowCart", fields: [playerTwoHasReceivedYellowCartId], references: [id])
  playerTwoHasReceivedYellowCartId Int?
  playerHasReceivedRedCart         Player?                        @relation(name: "playerHasReceivedRedCart", fields: [playerHasReceivedRedCartId], references: [id])
  playerHasReceivedRedCartId       Int?
  scorerPlayer                     ChampionsCupGameScorerPlayer[]
}

model ChampionsCupGameScorerPlayer {
  id                 Int              @id @default(autoincrement())
  championsCupGame   ChampionsCupGame @relation(fields: [championsCupGameId], references: [id])
  championsCupGameId Int
  player             Player           @relation(fields: [playerId], references: [id])
  playerId           Int
}

// end of champions cup
// league
model League {
  id           Int          @id @default(autoincrement())
  level        Int
  group        Int          @unique
  // team count = 14
  teamCount    Int          @default(14)
  teams        Team[]
  // top teams
  firstTeam    Team?        @relation(name: "firstTeam", fields: [firstTeamId], references: [id])
  firstTeamId  Int?         @unique
  secondTeam   Team?        @relation(name: "secondTeam", fields: [secondTeamId], references: [id])
  secondTeamId Int?         @unique
  thirdTeam    Team?        @relation(name: "thirdTeam", fields: [thirdTeamId], references: [id])
  thirdTeamId  Int?         @unique
  games        LeagueGame[]
}

model GameTime {
  id     Int          @id @default(autoincrement())
  name   GameTimeName @unique
  hour   Int
  minute Int
}

enum GameTimeName {
  LeagueLevelOne
  LeagueLevelTwo
  LeagueLevelThree
  LeagueLevelFour
  LeagueLevelFive
  LeagueLevelSix
  ChampionsCup
  FriendlyGameOne
  FriendlyGameTwo
  FriendlyGameThree
  GoldenCup
}

model LeagueGame {
  id                               Int                      @id @default(autoincrement())
  league                           League                   @relation(fields: [leagueId], references: [id])
  leagueId                         Int
  hostTeam                         Team                     @relation(name: "hostTeam", fields: [hostTeamId], references: [id])
  hostTeamId                       Int
  visitingTeam                     Team                     @relation(name: "visitingTeam", fields: [visitingTeamId], references: [id])
  visitingTeamId                   Int
  startTime                        DateTime
  resultDescription                String?
  result                           GameResult               @default(undone)
  winerTeamGoalCount               Int?
  loserGoalCount                   Int?
  // special player in game
  bestPlayer                       Player?                  @relation(name: "bestPlayer", fields: [bestPlayerId], references: [id])
  bestPlayerId                     Int?
  injuredPlayer                    Player?                  @relation(name: "injuredPlayer", fields: [injuredPlayerId], references: [id])
  injuredPlayerId                  Int?
  playerOneHasReceivedYellowCart   Player?                  @relation(name: "playerOneHasReceivedYellowCart", fields: [playerOneHasReceivedYellowCartId], references: [id])
  playerOneHasReceivedYellowCartId Int?
  playerTwoHasReceivedYellowCart   Player?                  @relation(name: "playerTwoHasReceivedYellowCart", fields: [playerTwoHasReceivedYellowCartId], references: [id])
  playerTwoHasReceivedYellowCartId Int?
  playerHasReceivedRedCart         Player?                  @relation(name: "playerHasReceivedRedCart", fields: [playerHasReceivedRedCartId], references: [id])
  playerHasReceivedRedCartId       Int?
  scorerPlayer                     LeagueGameScorerPlayer[]
}

model LeagueGameScorerPlayer {
  id           Int        @id @default(autoincrement())
  leagueGame   LeagueGame @relation(fields: [leagueGameId], references: [id])
  leagueGameId Int
  player       Player     @relation(fields: [playerId], references: [id])
  playerId     Int
}

// friendly game
model FriendlyGame {
  id                               Int                        @id @default(autoincrement())
  hostTeam                         Team                       @relation(name: "hostTeam", fields: [hostTeamId], references: [id])
  hostTeamId                       Int
  visitingTeam                     Team                       @relation(name: "visitingTeam", fields: [visitingTeamId], references: [id])
  visitingTeamId                   Int
  startTime                        DateTime
  resultDescription                String?
  result                           GameResult                 @default(undone)
  winerTeamGoalCount               Int?
  loserGoalCount                   Int?
  // special player in game
  bestPlayer                       Player?                    @relation(name: "bestPlayer", fields: [bestPlayerId], references: [id])
  bestPlayerId                     Int?
  injuredPlayer                    Player?                    @relation(name: "injuredPlayer", fields: [injuredPlayerId], references: [id])
  injuredPlayerId                  Int?
  playerOneHasReceivedYellowCart   Player?                    @relation(name: "playerOneHasReceivedYellowCart", fields: [playerOneHasReceivedYellowCartId], references: [id])
  playerOneHasReceivedYellowCartId Int?
  playerTwoHasReceivedYellowCart   Player?                    @relation(name: "playerTwoHasReceivedYellowCart", fields: [playerTwoHasReceivedYellowCartId], references: [id])
  playerTwoHasReceivedYellowCartId Int?
  playerHasReceivedRedCart         Player?                    @relation(name: "playerHasReceivedRedCart", fields: [playerHasReceivedRedCartId], references: [id])
  playerHasReceivedRedCartId       Int?
  scorerPlayer                     FriendlyGameScorerPlayer[]
}

model FriendlyGameScorerPlayer {
  id             Int          @id @default(autoincrement())
  friendlyGame   FriendlyGame @relation(fields: [friendlyGameId], references: [id])
  friendlyGameId Int
  player         Player       @relation(fields: [playerId], references: [id])
  playerId       Int
}

model RequestFriendlyGame {
  id             Int              @id @default(autoincrement())
  date           DateTime         @default(now())
  status         RequestStatus    @default(Pending)
  senderTeamId   Int
  receiverTeamId Int
  gameTime       friendlyGameTime
}

enum friendlyGameTime {
  One
  Two
  Three
}

model Tournament {
  id                             Int      @id @default(autoincrement())
  name                           String
  startDate                      DateTime
  endDate                        DateTime
  winOfficialGamePoints          Int
  equalOfficialGamePoints        Int
  winFriendlyGamePoints          Int
  equalFriendlyGamePoints        Int
  firstTeamInLeaguePoints        Int
  secondTeamInLeagePoints        Int
  thirdTeamInLeaguePoints        Int
  firstTeamInGoldenCupPoints     Int
  secondTeamInGoldenCupPoints    Int
  firstTeamInChampionsCupPoints  Int
  secondTeamInChampionsCupPoints Int
  playGamePoints                 Int
  buyCoinPoints                  Int
  buySilverMembershipPoints      Int
  buyGoldenMembershipPoints      Int
  buyDiamondMembershipPoints     Int
  firstTeam                      Team?    @relation(name: "firstTeam", fields: [firstTeamId], references: [id])
  firstTeamId                    Int?
  secondTeam                     Team?    @relation(name: "secondTeam", fields: [secondTeamId], references: [id])
  secondTeamId                   Int?
  thirdTeam                      Team?    @relation(name: "thirdTeam", fields: [thirdTeamId], references: [id])
  thirdTeamId                    Int?
  teams                          Team[]
}

enum GameResult {
  undone
  hostTeam
  visitingTeam
  equal
}

// sponser
model Sponser {
  id                            Int    @id @default(autoincrement())
  name                          String
  description                   String
  instagramPageLink             String
  telegramChanelLink            String
  websiteLink                   String
  minmumTeamScore               Int    @default(0)
  totalCoinCount                Int
  firstInLeagueCoinCount        Int
  secondInLeagueCoinCount       Int
  thirdInLeagueCoinCount        Int
  championsCupChampionCoinCount Int
  goldenCupChampionCoinCount    Int
  winOfficialGameCoinCount      Int
  topScorerCoinCount            Int
  teams                         Team[]
}

// admin
model AdminNews {
  id      Int    @id @default(autoincrement())
  title   String
  context Json
}

enum AdminNewsType {
  WeeklyNewspaper
  Interview
  SpecialNews
  Learning
  GuideGame
  SpecialGuideGame
  RulesGame
}

// general model
model GameLink {
  id          Int          @id @default(autoincrement())
  name        String
  url         String
  type        GameLinkType
  description String
}

enum GameLinkType {
  InstagramLink
  TelegramLink
  WebsiteLink
}

model GameConstantVariable {
  id     Int                      @id @default(autoincrement())
  name   GameConstantVariableName @unique
  amount Float
}

enum GameConstantVariableName {
  SalaryFactor
  DifferenceInPointsForEachGoal
  MinimumPlayerPriceFactor
  MaximumPlayerPriceFactor
  InviteNewTeamCoinCount
  NumberOfStadiumTicketCoins
  CostOfCreatingThirdTeam
  CostOfCreatingGroup
  CompletionInformationCoinCount
}

model GameTimestamp {
  id        Int               @id @default(autoincrement())
  name      GameTimestampName @unique
  timestamp DateTime
}

enum GameTimestampName {
  StartSession
  EndSession
}

model ContactUs {
  id             Int      @id @default(autoincrement())
  date           DateTime @default(now())
  fullname       String
  phonenumber    String   @unique @db.VarChar(11)
  messageContext String
  messageTitle   String
  adminResponse  String?
}

// comminiucation
model PrivateChat {
  id        Int                  @id @default(autoincrement())
  teamOne   Team                 @relation(name: "teamOne", fields: [teamOneId], references: [id])
  teamOneId Int
  teamTwo   Team                 @relation(name: "teamTwo", fields: [teamTwoId], references: [id])
  teamTwoId Int
  messages  PrivateChatMessage[]
}

model PrivateChatMessage {
  id                Int         @id @default(autoincrement())
  date              DateTime    @default(now())
  message           String
  isReadWithTeamOne Boolean     @default(false)
  isReadWithTeamTwo Boolean     @default(false)
  privateChat       PrivateChat @relation(fields: [privateChatId], references: [id])
  privateChatId     Int
}

model Ticket {
  id       Int             @id @default(autoincrement())
  title    String
  turn     TicketSide      @default(Team)
  date     DateTime        @default(now())
  messages TicketMessage[]
  team     Team            @relation(fields: [teamId], references: [id])
  teamId   Int
}

model TicketMessage {
  id       Int        @id @default(autoincrement())
  date     DateTime   @default(now())
  message  String
  writer   TicketSide
  ticket   Ticket     @relation(fields: [ticketId], references: [id])
  ticketId Int
}

enum TicketSide {
  Admin
  Team
}

model PublicAdminMessage {
  id      Int                          @id @default(autoincrement())
  date    DateTime
  title   String
  context String
  teams   PublicAdminMessagesOfTeams[]
}

model PublicAdminMessagesOfTeams {
  id                   Int                @id @default(autoincrement())
  publicAdminMessage   PublicAdminMessage @relation(fields: [publicAdminMessageId], references: [id])
  publicAdminMessageId Int
  team                 Team               @relation(fields: [teamId], references: [id])
  teamId               Int
  isRead               Boolean
}

model Group {
  id                  Int             @id @default(autoincrement())
  name                String          @unique
  bio                 String
  deputyCount         Int             @default(0)
  profilePictureUrl   String?
  postCountInToDay    Int             @default(0)
  dateOfEstablishment DateTime        @default(now())
  access              GroupAccessType @default(Public)
  members             GroupMember[]
  posts               GroupPost[]
}

enum GroupAccessType {
  Public
  Private
}

model GroupMember {
  id         Int             @id @default(autoincrement())
  group      Group           @relation(fields: [groupId], references: [id])
  groupId    Int
  team       Team            @relation(fields: [teamId], references: [id])
  teamId     Int
  isDeported Boolean         @default(false)
  role       GroupMemberRole @default(Normal)
}

enum GroupMemberRole {
  Admin
  Deputy
  Normal
}

model GroupPost {
  id                  Int                @id @default(autoincrement())
  title               String
  context             String
  pictureUrl          String
  likeCount           Int                @default(0)
  like                Team[]             @relation(name: "like")
  disLikeCount        Int                @default(0)
  dislike             Team[]             @relation(name: "disLike")
  dateOfEstablishment DateTime           @default(now())
  group               Group              @relation(fields: [groupId], references: [id])
  groupId             Int
  commentsCount       Int                @default(0)
  comments            GroupPostComment[]
}

model GroupPostComment {
  id                  Int       @id @default(autoincrement())
  text                String
  dateOfEstablishment DateTime  @default(now())
  post                GroupPost @relation(fields: [postId], references: [id])
  postId              Int
  team                Team      @relation(fields: [teamId], references: [id])
  teamId              Int
}

model ChatRoom {
  id                  Int               @id @default(autoincrement())
  name                chatRoomName      @default(Public)
  isDefaultChatRoom   Boolean           @default(false)
  dateOfEstablishment DateTime          @default(now())
  members             ChatRoomMember[]
  messages            ChatRoomMessage[]
}

enum chatRoomName {
  Public
  LeagueCoaches
}

model ChatRoomMessage {
  id         Int      @id @default(autoincrement())
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId Int
  message    String
  date       DateTime @default(now())
}

model ChatRoomMember {
  id                  Int      @id @default(autoincrement())
  chatRoom            ChatRoom @relation(fields: [chatRoomId], references: [id])
  chatRoomId          Int
  team                Team     @relation(fields: [teamId], references: [id])
  teamId              Int
  isDeported          Boolean  @default(false)
  lastTimeSendMessage DateTime @default(now())
}

// end comminiucation

// market
model AdminSellableTeam {
  id               Int           @id @default(autoincrement())
  priceInCoinCount Int
  team             Team          @relation(fields: [teamId], references: [id])
  teamId           Int           @unique
  sellerAdmin      User          @relation(name: "seller", fields: [sellerAdminId], references: [id])
  sellerAdminId    Int           @unique
  buyerUser        User          @relation(name: "buyer", fields: [buyerUserId], references: [id])
  buyerUserId      Int           @unique
  date             DateTime
  description      String
  status           ProductStatus
}

model AdminSellablePlayer {
  id               Int           @id @default(autoincrement())
  priceInCoinCount Int
  player           Player        @relation(fields: [playerId], references: [id])
  playerId         Int           @unique
  sellerAdmin      User          @relation(fields: [sellerAdminId], references: [id])
  sellerAdminId    Int           @unique
  buyerTeam        Team          @relation(fields: [buyerTeamId], references: [id])
  buyerTeamId      Int           @unique
  date             DateTime
  description      String
  status           ProductStatus
}

model playerTransfers {
  id               Int           @id @default(autoincrement())
  priceInCoinCount Int
  player           Player        @relation(fields: [playerId], references: [id])
  playerId         Int           @unique
  sellerTeam       Team          @relation(name: "seller", fields: [sellerTeamId], references: [id])
  sellerTeamId     Int           @unique
  buyerTeam        Team          @relation(name: "buyer", fields: [buyerTeamId], references: [id])
  buyerTeamId      Int           @unique
  date             DateTime
  description      String
  status           ProductStatus
}

enum ProductStatus {
  OnSale
  SoldOut
}

model motivationalSentence {
  id       Int    @id @default(autoincrement())
  sentence String
  author   String
}

// general eunms
enum RequestStatus {
  Pending
  Confirm
  Reject
}
